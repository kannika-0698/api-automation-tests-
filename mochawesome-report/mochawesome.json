{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2023-07-29T15:37:49.102Z",
    "end": "2023-07-29T15:37:51.452Z",
    "duration": 2350,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "dcc1fac2-6792-4ea8-8e80-fc8a945f7211",
      "title": "",
      "fullFile": "/Users/kannikatk/Documents/API/executionFile/getResponse.test.js",
      "file": "/executionFile/getResponse.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "96efd765-d59a-469d-addd-0b0ec6298d85",
          "title": "API Automation Test",
          "fullFile": "/Users/kannikatk/Documents/API/executionFile/getResponse.test.js",
          "file": "/executionFile/getResponse.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the API returns of all the users 'First Name' and 'Email' by filtering when the user requested to get the first name and email from the users list",
              "fullTitle": "API Automation Test Verify that the API returns of all the users 'First Name' and 'Email' by filtering when the user requested to get the first name and email from the users list",
              "timedOut": false,
              "duration": 598,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request.get(\"api/users?page=1\");\nconst getData = response.body.data;\nconsole.log(\"getData\", getData);\n(0, chai_1.expect)(response.body.data).to.not.be.empty;\nconst filterDataByNameAndEmail = getData.map((name) => ({\n    firstName: name.first_name,\n    email: name.email,\n}));\n(0, chai_1.expect)(response.status).to.equal(200);\n(0, chai_1.expect)(filterDataByNameAndEmail).to.be.an('array');\nconsole.log(filterDataByNameAndEmail);\nconsole.log(\"response status\", response.status);",
              "err": {},
              "uuid": "e92a7718-0cd1-4e0f-b942-3d755b7486cf",
              "parentUUID": "96efd765-d59a-469d-addd-0b0ec6298d85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the API returns the users details from the given ID when the user requested for the user details corresponded to the given ID",
              "fullTitle": "API Automation Test Verify that the API returns the users details from the given ID when the user requested for the user details corresponded to the given ID",
              "timedOut": false,
              "duration": 235,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getAPIresponse = await request.get(`api/users/${passId}`);\nconst getData = getAPIresponse.body.data;\nconsole.log(\"getData\", getData);\n(0, chai_1.expect)(getAPIresponse.status).to.equal(200);\n(0, chai_1.expect)(getData.id).to.equals(passId);\n(0, chai_1.expect)(getData.first_name).to.eql('George');\n(0, chai_1.expect)(getData.last_name).to.eql('Bluth');\n(0, chai_1.expect)(getData.email).to.eql('george.bluth@reqres.in');\n(0, chai_1.expect)(getData.avatar).to.eql('https://reqres.in/img/faces/1-image.jpg');",
              "err": {},
              "uuid": "7b685433-ed48-40df-9ec9-dfe0830a09f7",
              "parentUUID": "96efd765-d59a-469d-addd-0b0ec6298d85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the API creates the new user by given data when the user requested to create a user",
              "fullTitle": "API Automation Test Verify that the API creates the new user by given data when the user requested to create a user",
              "timedOut": false,
              "duration": 566,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = {\n    First_name: \"Kannika\",\n    Last_name: \"TK\",\n    Email: faker_1.faker.internet.email()\n};\nconst getresponse = await request.post(\"api/users?page=1\").send(data);\nconst getData = getresponse.body;\nconsole.log(\"getData\", getData);\n(0, chai_1.expect)(getresponse.status).to.equal(201);\n(0, chai_1.expect)(getData.First_name).to.eql(data.First_name);\n(0, chai_1.expect)(getData.Last_name).to.eql(data.Last_name);\n(0, chai_1.expect)(getData.Email).to.eql(data.Email);\ngetuserID = getData.id;\nconsole.log(\"getuserID\", getuserID);",
              "err": {},
              "uuid": "50019472-e815-46da-9a77-1148bc79e644",
              "parentUUID": "96efd765-d59a-469d-addd-0b0ec6298d85",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the API returns updated/edited data for the specified user using an ID when the user requested to update/edit the user details",
              "fullTitle": "API Automation Test Verify that the API returns updated/edited data for the specified user using an ID when the user requested to update/edit the user details",
              "timedOut": false,
              "duration": 941,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = {\n    First_name: \"EditedFirstName\",\n    Last_name: \"EditedTK\",\n    Email: faker_1.faker.internet.email()\n};\nconst getPutResponse = await request.put(`api/users/${getuserID}`).send(data);\nconst getData = getPutResponse.body;\nconsole.log(\"getData\", getData);\n(0, chai_1.expect)(getPutResponse.status).to.equal(200);\n(0, chai_1.expect)(getData.First_name).to.eql(data.First_name);\n(0, chai_1.expect)(getData.Last_name).to.eql(data.Last_name);\n(0, chai_1.expect)(getData.Email).to.eql(data.Email);",
              "err": {},
              "uuid": "a8198beb-079c-4716-bf37-2bababa5d139",
              "parentUUID": "96efd765-d59a-469d-addd-0b0ec6298d85",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e92a7718-0cd1-4e0f-b942-3d755b7486cf",
            "7b685433-ed48-40df-9ec9-dfe0830a09f7",
            "50019472-e815-46da-9a77-1148bc79e644",
            "a8198beb-079c-4716-bf37-2bababa5d139"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2340,
          "root": false,
          "rootEmpty": false,
          "_timeout": 50000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 50000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}